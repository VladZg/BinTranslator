; Assembly logging of binary translation

start:       
    pusha    
    finit    
    push rbp 

; Init RAM
    sub rsp, 800 (RAM_size)
    mov rbp, rsp          

; [0] IN
    push rdi           
    push rax           
    push rsi           
    mov  r14, 0x560e75b51d30       
    call r14           
    mov  r14, rax      
    push rsi           
    push rax           
    push rdi           
    push r14           

; [1] POP
    pop  RBX

; [2] PUSH
    mov   r14, 0x0000000000000001 
    push  r14          

; [3] POP
    pop  RAX

; [4] PUSH
    push RBX

; [5] PUSH
    mov   r14, 0x000000000000029A 
    push  r14          

; [6] ; JE
    pop  r14       
    pop  r13       
    cmp  r13, r14  
    JE 0

; [7] ; CALL
    CALL 0

; [8] PUSH
    push RAX

; [9] OUT
    pusha            
    pop  r14       
    mov  rdi, r14  
    mov  r14, 0x560e75b51cf0   
    call r14       
    popa           

; [10] ; JMP
    JMP 0

; [11] HLT
    add rsp, <RAM_size>
    pop rbp            
    popa               
    ret                

; [12] PUSH
    push RBX

; [13] PUSH
    mov   r14, 0x0000000000000001 
    push  r14          

; [14] ; JAE
    pop  r14       
    pop  r13       
    cmp  r13, r14  
    JAE 0

; [15] PUSH
    mov   r14, 0x0000000000000000 
    push  r14          

; [16] POP
    pop  RAX

; [17] ; JMP
    JMP 0

; [18] PUSH
    push RBX

; [19] PUSH
    mov   r14, 0x0000000000000001 
    push  r14          

; [20] ; JNE
    pop  r14       
    pop  r13       
    cmp  r13, r14  
    JNE 0

; [21] ; JMP
    JMP 0

; [22] PUSH
    push RBX

; [23] PUSH
    push RAX

; [24] MUL
    pop  r13     
    pop  r14     
    push rax     
    mov  rax, r13
    imul r14     
    mov  r13, rax
    pop  rax     
    push r13     

; [25] POP
    pop  RAX

; [26] PUSH
    mov   r14, 0x00000000FFFFFFFF 
    push  r14          
    push RBX
    pop  r13     
    pop  r14     
    add  r13, r14
    push r13     

; [27] POP
    pop  RBX

; [28] ; CALL
    CALL 0

; [29] RET
    ret

